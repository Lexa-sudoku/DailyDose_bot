import logging
import datetime
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADDING_MEDICATION, SETTING_TIME, SETTING_DURATION, CONFIRM_DELETE = range(5)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
DATA_FILE = "medications_data.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as file:
            try:
                return json.load(file)
            except json.JSONDecodeError:
                return {}
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in data:
        data[user_id] = {
            "medications": {},
            "progress": {}
        }
        save_data(data)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    keyboard = [
        ["–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"],
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"],
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤"],
        ["–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
    return CHOOSING_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    
    if choice == "–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:")
        return ADDING_MEDICATION
    
    elif choice == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(update, context)
        return CHOOSING_ACTION
    
    elif choice == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤":
        await show_medications(update, context)
        return CHOOSING_ACTION
    
    elif choice == "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤":
        await update.message.reply_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤? "
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç '–£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞'"
        )
        return CONFIRM_DELETE
    
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSING_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
async def add_medication(update: Update, context: ContextTypes.DEFAULT_TYPE):
    medication_name = update.message.text
    context.user_data["current_medication"] = medication_name
    
    await update.message.reply_text(
        f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ '{medication_name}' –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ. "
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):"
    )
    
    return SETTING_TIME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        time_obj = datetime.datetime.strptime(time_str, "%H:%M").time()
        context.user_data["medication_time"] = time_str
        
        await update.message.reply_text(
            f"–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}. "
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ –≤ –¥–Ω—è—Ö (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ):"
        )
        
        return SETTING_DURATION
    
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):"
        )
        return SETTING_TIME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞
async def set_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        duration = int(update.message.text)
        if duration <= 0:
            await update.message.reply_text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return SETTING_DURATION
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ
        medication_name = context.user_data["current_medication"]
        medication_time = context.user_data["medication_time"]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(update.effective_user.id)
        data = load_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
        start_date = datetime.datetime.now().strftime("%Y-%m-%d")
        data[user_id]["medications"][medication_name] = {
            "time": medication_time,
            "duration": duration,
            "start_date": start_date
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if medication_name not in data[user_id]["progress"]:
            data[user_id]["progress"][medication_name] = {
                "taken": 0,
                "skipped": 0
            }
        
        save_data(data)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        context.user_data.clear()
        
        await update.message.reply_text(
            f"–õ–µ–∫–∞—Ä—Å—Ç–≤–æ '{medication_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞: {medication_time}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞: {duration} –¥–Ω–µ–π\n"
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        update_reminders(context.application)
        
        return CHOOSING_ACTION
        
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –∫—É—Ä—Å–∞:"
        )
        return SETTING_DURATION

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    
    if user_id not in data or not data[user_id]["progress"]:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤.")
        return
    
    progress_text = "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–∏—ë–º—É –ª–µ–∫–∞—Ä—Å—Ç–≤:\n\n"
    
    for med_name, progress in data[user_id]["progress"].items():
        if med_name in data[user_id]["medications"]:
            duration = data[user_id]["medications"][med_name]["duration"]
            taken = progress["taken"]
            skipped = progress["skipped"]
            #total = taken + skipped
            percent = (taken / duration * 100) if duration > 0 else 0
            
            progress_text += f"*{med_name}*\n"
            progress_text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {taken}/{duration} ({percent:.1f}%)\n"
            progress_text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}\n\n"
    
    await update.message.reply_text(progress_text, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
async def show_medications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    
    if user_id not in data or not data[user_id]["medications"]:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.")
        return
    
    meds_text = "–í–∞—à —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤:\n\n"
    
    for med_name, med_info in data[user_id]["medications"].items():
        start_date = datetime.datetime.strptime(med_info["start_date"], "%Y-%m-%d")
        end_date = start_date + datetime.timedelta(days=med_info["duration"])
        days_left = (end_date - datetime.datetime.now()).days + 1
        
        meds_text += f"*{med_name}*\n"
        meds_text += f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞: {med_info['time']}\n"
        meds_text += f"üìÖ –ù–∞—á–∞–ª–æ –∫—É—Ä—Å–∞: {med_info['start_date']}\n"
        meds_text += f"üóì –û–∫–æ–Ω—á–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {end_date.strftime('%Y-%m-%d')}\n"
        meds_text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {max(0, days_left)}\n\n"
    
    await update.message.reply_text(meds_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    confirmation_text = update.message.text
    
    if confirmation_text == "–£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞":
        user_id = str(update.effective_user.id)
        data = load_data()
        
        if user_id in data:
            data[user_id]["medications"] = {}
            data[user_id]["progress"] = {}
            save_data(data)
        
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
    else:
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    return CHOOSING_ACTION

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminder(context: ContextTypes.DEFAULT_TYPE, user_id=None, med_name=None):
    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ job_queue
    if hasattr(context, 'job') and context.job:
        job = context.job
        user_id, med_name = job.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
    data = load_data()
    if user_id not in data or med_name not in data[user_id]["medications"]:
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –∫—É—Ä—Å
    med_info = data[user_id]["medications"][med_name]
    start_date = datetime.datetime.strptime(med_info["start_date"], "%Y-%m-%d")
    end_date = start_date + datetime.timedelta(days=med_info["duration"])
    
    if datetime.datetime.now() > end_date:
        return
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è–ª", callback_data=f"taken_{med_name}"),
            InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏–ª", callback_data=f"skipped_{med_name}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=user_id,
        text=f"‚è∞ –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: *{med_name}*",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action, med_name = query.data.split("_", 1)
    user_id = str(query.from_user.id)
    data = load_data()
    
    if user_id in data and med_name in data[user_id]["progress"]:
        if action == "taken":
            data[user_id]["progress"][med_name]["taken"] += 1
            response_text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û—Ç–º–µ—á–µ–Ω–æ, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ {med_name}."
        else:  # skipped
            data[user_id]["progress"][med_name]["skipped"] += 1
            response_text = f"‚ùå –û—Ç–º–µ—á–µ–Ω–æ, —á—Ç–æ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–∏–µ–º {med_name}."
        
        save_data(data)
        await query.edit_message_text(text=response_text)
    else:
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def schedule_reminders(application):
    data = load_data()
    now = datetime.datetime.now()
    
    for user_id, user_data in data.items():
        for med_name, med_info in user_data["medications"].items():
            # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
            hour, minute = map(int, med_info["time"].split(":"))
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_time = datetime.datetime.now().replace(hour=hour, minute=minute, second=0)
            if reminder_time < now:
                reminder_time = reminder_time + datetime.timedelta(days=1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –∫—É—Ä—Å
            start_date = datetime.datetime.strptime(med_info["start_date"], "%Y-%m-%d")
            end_date = start_date + datetime.timedelta(days=med_info["duration"])
            
            if now <= end_date:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                job_name = f"reminder_{user_id}_{med_name}"
                current_jobs = application.job_queue.get_jobs_by_name(job_name)
                for job in current_jobs:
                    job.schedule_removal()
                
                # –¢–µ–ø–µ—Ä—å –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                first_time = (reminder_time - now).total_seconds()
                application.job_queue.run_repeating(
                    send_reminder,
                    interval=86400,  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    first=first_time,
                    data=(user_id, med_name),
                    name=job_name
                )

def cancel_all_reminders(application):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    jobs = application.job_queue.jobs()
    for job in jobs:
        if job.name and job.name.startswith("reminder_"):
            job.schedule_removal()

def update_reminders(application):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    cancel_all_reminders(application)
    schedule_reminders(application)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_and_send_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è"""
    data = load_data()
    now = datetime.datetime.now()
    current_time = now.strftime("%H:%M")
    
    for user_id, user_data in data.items():
        for med_name, med_info in user_data["medications"].items():
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏–µ–º–∞ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
            if med_info["time"] == current_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –∫—É—Ä—Å
                start_date = datetime.datetime.strptime(med_info["start_date"], "%Y-%m-%d")
                end_date = start_date + datetime.timedelta(days=med_info["duration"])
                
                if now <= end_date:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    await send_reminder(context, user_id=user_id, med_name=med_name)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –ø—Ä–∏–µ–º–µ {med_name}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É @BotFather –≤ Telegram)
    TOKEN = "8098518856:AAEf4Y1vZLoQq8S_hW2Gd1OxscIVf2TxXgw"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice)],
            ADDING_MEDICATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_medication)],
            SETTING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_time)],
            SETTING_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_duration)],
            CONFIRM_DELETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete)],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    application.job_queue.run_repeating(
        check_and_send_reminders, 
        interval=60,  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60 —Å–µ–∫—É–Ω–¥)
        first=1  # –ù–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    )
    
    # –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    application.job_queue.run_once(
        lambda context: schedule_reminders(application),
        when=5  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    )
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()